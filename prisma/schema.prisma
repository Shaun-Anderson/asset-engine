// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Server {
    id String @id @default(cuid())
}

model Client {
    id String @id @default(cuid())
    name String
    email String?
    number String?
    company String?
    invoices Invoice[]
    worklogs Worklog[]
    contracts Contract[]
}

// TODO: enable on move to Postgres
// enum InvoiceStatus {
//     DRAFT
//     PENDING
//     ACTIVE
//     COMPLETED
//     CANCELLED
// }
model Contract {
    id String @id @default(cuid())
    status String
    client_id String
    client Client @relation(fields: [client_id], references: [id])
    rate Float?
    created_at DateTime @default(now())
    modified_at DateTime @updatedAt
}

// TODO: enable on move to Postgres
// enum InvoiceStatus {
//     DRAFT
//     SENT
//     RECIEVED
//     PAID
//     CANCELLED
// }
model Invoice {
    id String @id @default(cuid())
    client_id String
    client Client @relation(fields: [client_id], references: [id])
    due_date DateTime
    paid_date DateTime?
    status String
    totalCost Float
    created_at DateTime @default(now())
    modified_at DateTime @updatedAt
    expenses Expense[]
    worklogs Worklog[]
    consume_worklogs Boolean @default(false)
}

model Expense {
    id String @id @default(cuid())
    invoice_id String
    invoice Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
    cost Float
    description String
    quantity Int
    created_at DateTime @default(now())
    modified_at DateTime @updatedAt
}

model Worklog {
    id String @id @default(cuid())
    user_id String
    client_id String?
    client Client? @relation(fields: [client_id], references: [id])
    value Int
    rate Float?
    description String
    recorded_at DateTime
    created_at DateTime @default(now())
    modified_at DateTime @updatedAt
    invoice_id String?
    invoice Invoice? @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    stripeCustomerId        String? @unique
    isActive                Boolean            @default(false)
    current_period_end DateTime?
    dark_mode Boolean @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
